<li><%= link_to 'Edit', edit_plan_path(@plan) %></li>
<li><%= link_to 'Back', plans_path %></li>

</ul>
</div>
</header>

      <div class="ul" class="ui-widget-content">
         <div class="heading">Requirements</div>
		 <div id="accordion">
			 <h3>ME</h3>
			 <div>and dan made this website and we hope you like it</div>
			 <h3>welcome</h3>
			 <div>	All that glitters is gold<br>
					Only shooting stars break the mold</div>
			 <h3>Other academic things</h3>
			 <div>pencil<br>paper<br>book<br>other</div>
		 </div>
      </div>
      <div class="container">
         <div class="heading"><%= @plan.name %></div>
         <div class="ur">
            <table id="tab">
              
            </table>
         </div>
      </div>
      <div class="bl">
         <div class="heading">Validation Status</div>
		  Year:
		  <select name="Year" id="yselect">
			<option value=''></option>
		  </select><br><br>
		  Make:
		  <select name="Make" id="mkselect">

		  </select><br><br>
		  Model:
		  <select name="Model" id="moselect">

		  </select>
      </div>
      <div class="br" id="wiki">
         <div class="heading">Course Finder</div>

			<table data-role="table" id="myTable">
			  <thead>
				<tr>
				  <th>Course Number</th>
				  <th data-priority="1" class="csfth">Course Name</th>
				  <th data-priority="2" class="csfth">Description</th>
				  <th data-priority="3" class="csfth">Credits</th>
				</tr>
			  </thead>
			  <tbody id="courselisttab">
				
			  </tbody>
			</table>
   		</div>

   	<script>

class Term {
    constructor(name) {
        this.name = name;
        this.courses = {};
    }
}

class Year {
    constructor(date) {
        this.date = date;
        this.terms = {
            0: new Term('Fall'),
            1: new Term('Spring'),
            2: new Term('Summer')
        }
    }
}

class Course {
    constructor(number, name, term, year, credits) {
        this.number = number;
        this.name = name;
        this.term = term;
        this.year = year;
        this.credits = credits;
    }
}

class Plan {
    constructor(name, catYear, major, student, currYr, currTerm) {
        this.name = name;
        this.catYear = catYear;
        this.major = major;
        this.student = student;
        this.currYr = currYr;
		this.currTerm = currTerm;
        this.courses = {};
        this.years = {};
    }
	
	copy(j){
		this.name = j.name;
		this.catYear = j.catalogYear;
		this.major = j.major;
		this.student = j.student;
		this.currYr = j.currYear;
		this.currTerm = j.currTerm;
		this.courses = j.courses;
	}
		
	
    addCourse(number, name, term, year, credits) {
		var y;
		if(year < 9999){
			var l;
			var g;
			var yrString = year.toString();
			if(term === 'Fall'){
				l = yrString.substr(2, 3);
				g = (parseInt(l) + 1).toString();
			}else{
				g = yrString.substr(2, 3);
				l = (parseInt(g) - 1).toString();
			}
			y = parseInt(yrString.substr(0, 2) + l + g);
		}else{	
			y = year;
		}
		//create new year if needed
        if (this.years[y] === undefined) {
            this.years[y] = new Year(y);
        }
		//create the course
        this.courses[number] = new Course(number, name, term, y, credits);
		//Insert into correct place in this.years.terms.courses
        if (term === 'Fall') {
            this.years[y].terms[0].courses[number] = this.courses[number];
        } else if (term === 'Spring') {
            this.years[y].terms[1].courses[number] = this.courses[number];
        } else {
            this.years[y].terms[2].courses[number] = this.courses[number];
        }
    }
    removeCourse(number) {
        var year = this.courses[number].year;
        var term = 0;
        if (this.courses[number].term === 'Spring') {
            term = 1;
        } else if (this.courses[number].term === 'Summer') {
            term = 2;
        }
        delete this.years[year].terms[term].courses[number];
        delete this.courses[number];
		var bool = false;
		//After removal, check to see if there are any other courses left in
		//the year. if not, remove the year.
		for(var i in this.years[year].terms){
			for(var j in this.years[year].terms[i].courses){
				if(this.years[year].terms[i].courses[j] != undefined){
					bool = true;
				}
			}
		}
		if(bool === false){
			this.removeYear(year);
		}
    }
    removeYear(year) {
        for (var term in this.years[year].terms) {
            for (var course in this.years[year].terms[term].courses) {
                delete this.courses[course];
            }
        }
        delete this.years[year];
    }
	checkCur(){
		if(this.currYr < 9999){
			var yrString = this.currYr.toString();
			var l;
			var g;
			l = yrString.substr(2, 3);
			g = (parseInt(l) + 1).toString();
			this.currYr = parseInt(yrString.substr(0, 2) + l + g);
		}
	}
};
var myPlan = new Plan();
var data;
function getData(url) {
var data;
    $.ajax({
        async: false, //thats the trick
        url: '/plans/<%= @id %>.json',
        dataType: 'json',
        success: function(response){
           data = response;
        }
    });
    return data;
}

function getDataCourses(url) {
	var data;
		$.ajax({
			async: false, //thats the trick
			url: '/courses.json',
			dataType: 'json',
			success: function(response){
			   data = response;
			}
		});
	return data;
}

//Sets up all the html elements (APE plan, video, wikipedia)
window.onload = function setCourses() {
	data = getData('/plans/<%= @id %>.json');
	myPlan.copy(data);
	myPlan.checkCur();
	getCourseList();
	for(var x in myPlan.courses){
		var c = myPlan.courses[x];
		myPlan.addCourse(c.number, c.name, c.term, c.year, c.credits);
	}
    updateCs();
    resetGrid();
}

var csDat;
function getCourseList(){
	csDat = getDataCourses('/courses.json');
	for (var i in csDat){
		var newRow = document.createElement("tr");
		for (var j in csDat[i]){
			var newCol = document.createElement("td");
			var txt = document.createTextNode(csDat[i][j]);
			newCol.appendChild(txt);
			newRow.appendChild(newCol);
		}
		$('#courselisttab').append(newRow);
	}
}

//update course list
function updateCs() {
	//find table
    var myNode = document.getElementById("tab");
	//remove all elements in table
    while (myNode.firstChild) {
        myNode.removeChild(myNode.firstChild);
    }
	//iterate through all years, creating a new row for each year
    for (var i in myPlan.years) {
        var row = document.createElement("TR");
        row.setAttribute("class", "row");
        row.setAttribute("id", myPlan.years[i].date);
        document.getElementById('tab').appendChild(row);
		//iterate through all terms in year, creating new column for each term
        for (var j = 0; j < 3; j++) {
            var column = document.createElement("TD");
            column.setAttribute("class", "col");
            column.setAttribute("id", myPlan.years[i].terms[j].name + myPlan.years[i].date);
            document.getElementById(myPlan.years[i].date).appendChild(column);
            var paragraph = document.createElement("p");
			//name the term correctly ('Fall 201415' should be 'Fall 2014', etc.)
            if (myPlan.years[i].terms[j].name === 'Fall') {
                var internal = document.createTextNode(myPlan.years[i].terms[j].name + 
				               ' ' + myPlan.years[i].date.toString().substr(0, 4));
            } else {
                var internal = document.createTextNode(myPlan.years[i].terms[j].name + 
				' ' + myPlan.years[i].date.toString().substr(0, 2) +
				      myPlan.years[i].date.toString().substr(4, 5));
            }
            paragraph.setAttribute("class", "t");
            paragraph.appendChild(internal);
            column.appendChild(paragraph);
        }
    }
	//go through all the courses and put them into the correct table cell
    for (var l in myPlan.years) {
        for (var m in myPlan.years[l].terms) {
            var totalHours = 0;
			//most of the really ugly statements are just making IDs for elements
            var currentElement = 
			      document.getElementById(myPlan.years[l].terms[m].name + 
			      myPlan.years[l].date);
            var hoursP = document.createElement("p");
            hoursP.setAttribute("class", "hours");
            currentElement.appendChild(hoursP);
            var br1 = document.createElement("br");
            currentElement.appendChild(br1);
            for (var k in myPlan.years[l].terms[m].courses) {
                var courseText = document.createTextNode(
				                   myPlan.years[l].terms[m].courses[k].number 
								   + ' ' + myPlan.years[l].terms[m].courses[k].name);
                currentElement.appendChild(courseText);
                var br2 = document.createElement("br");
                currentElement.appendChild(br2);
                totalHours += myPlan.years[l].terms[m].courses[k].credits;
            }
            var hoursT = document.createTextNode("Hours: " + totalHours);
            hoursP.appendChild(hoursT);
			//color past semester text gray
			var ct = myPlan.years[l].terms[m].name;
			if(l < myPlan.currYr){
				currentElement.style.color = "gray";
			}else if(l == myPlan.currYr && ((ct == 'Fall' && (myPlan.currTerm == 'Spring' || myPlan.currTerm == 'Summer')) || (ct == 'Spring' &&  myPlan.currTerm == 'Summer'))){
				currentElement.style.color = "gray";
			}
        }
    }
}

//Name validation, must exist on submit
function validateName() {
    var x = document.forms[0]["name"].value;
    if (x == "") {
        document.forms[0]["name"].style.border = '2px solid red';
        return false;
    } else {
        document.forms[0]["name"].style.border = '2px solid green';
    }
}

//Course number validation must be in format DEPT-####
function validateNumber() {
    var x = document.forms[0]["number"].value;
    var re = /\w-\d\d\d\d/g;
    if (!re.test(x)) {
        document.forms[0]["number"].style.border = '2px solid red';
        return false;
    } else {
        document.forms[0]["number"].style.border = '2px solid green';
    }
}

//Add course to plan using button
function addCs() {
	//Get data from form
    var nu = document.forms[0]["number"].value;
    var nm = document.forms[0]["name"].value;
    var tm = document.forms[0]["term"].value;
    var yr = document.forms[0]["year"].value;
    var cd = parseInt(document.forms[0]["cred"].value);
	//Find correct term index
	if(tm == 'Fall'){
		ct = 0;
	}else if(tm == 'Spring'){
		ct = 1;
	}else{
		ct = 2;
	}
	//make sure we're not adding to a completed semester
	if(yr < myPlan.currYr || (yr == myPlan.currYr && ct < myPlan.currTerm)){
		customAlert('Cannot add course to past semester!');
	}else{
		myPlan.addCourse(nu, nm, tm, yr, cd);
		updateCs();
	}
}

//remove course using button
function rmCs() {
    var nu = document.forms[0]["number"].value;
	var ct;
	//make sure we're not trying to remove a course not in the plan
	if(myPlan.courses[nu] === undefined){
		document.forms[0]["number"].style.border = '2px solid red';
        nu = nu == '' ? 'NULL' : nu;
		customAlert('"' + nu + '" does not exist in the plan!');	
	}else{
		if(myPlan.courses[nu].term == 'Fall'){
			ct = 0;
		}else if(myPlan.courses[nu].term == 'Spring'){
			ct = 1;
		}else{
			ct = 2;
		}
		//make sure we're not removing a course from past semester
		if (myPlan.courses[nu].year < myPlan.currYr ||
			(myPlan.courses[nu].year == myPlan.currYr && 
			 ct < myPlan.currTerm)){
			document.forms[0]["number"].style.border = '2px solid red';
			customAlert('Cannot remove completed course!');
		}else{
			myPlan.removeCourse(nu);
			updateCs();
		}
	}
}

//since I'm not using flex boxes, resize the divs whenever the window is resized
function resetGrid() {
    var width = window.innerWidth;
    var height = window.innerHeight;
    document.getElementsByClassName('container')[0].style.width = window.innerWidth * .75 + "px";
    document.getElementsByClassName('container')[0].style.height = (window.innerHeight - 40) * .60 + "px";
    document.getElementsByClassName('br')[0].style.width = window.innerWidth * .75 + "px";
    document.getElementsByClassName('br')[0].style.height = (window.innerHeight - 40) * .38 + "px";
    document.getElementsByClassName('ul')[0].style.width = window.innerWidth * .24 + "px";
    document.getElementsByClassName('ul')[0].style.height = (window.innerHeight - 40) * .60 + "px";
    document.getElementsByClassName('bl')[0].style.width = window.innerWidth * .24 + "px";
    document.getElementsByClassName('bl')[0].style.height = (window.innerHeight - 40) * .38 + "px";
}

window.addEventListener("resize", resetGrid);

//alert for form validation
function customAlert(text) {
    var n = noty({
        layout: 'topRight',
        theme: 'metroui',
        text: text,
        type: 'warning',
        timeout: 3000,
        progressBar: true
    });
}

</script>
   <script>
	$( "#accordion" ).accordion({collapsible: true, heightStyle: "content"});
	</script>
	<script>
		$('table').filterTable({minRows: 0});
	</script>